syntax = "proto3";
// import "google/protobuf/struct.proto";
option go_package = "github.com/panyam/pslite";
package pslite_protos;

message EmptyMessage {}

/**
 * The streaming servicefor listening to events from the server in a
 * streaming fashion.
 * The typical use case is:
 *  client creates a subscription object.  This Subscription object
 *  can be used to add or remove items to watch for.
 *  
 *  When the client is ready they can start listening on the subscription
 *  when the server would send a stream of events/updates.
 */
service PSLiteService {
  rpc OpenTopic(OpenTopicRequest) returns (EmptyMessage);
  rpc Publish(PublishRequest) returns (EmptyMessage);
  rpc Subscribe(SubscribeRequest) returns (stream Message);
}

message Topic {
  /**
   * Name of the topic.
   */
  string name = 1;

  /**
   * Folder where topic will be persisted.
   */
  string records_path = 2;

  /**
   * Folder where topic indexes will be persisted.
   */
  string index_path = 3;
}

message OpenTopicRequest {
  Topic topic = 1;
}

message PublishRequest {
  /**
   * Name of the topic to publish to.
   */
  string topic_name = 1;

  /**
   * Content can be bytes or strings.
   */
  oneof content {
    bytes content_bytes = 2;
    string content_string = 3;
  }
}

message SubscribeRequest {
  /**
   * Name of the topic to subscribe to.
   */
  string topic_name = 1;

  /**
   * Offset of the topic to start consuming from.
   */
  int64 offset = 2;

  /**
   * The end offset.  If this is specified, the subscription will end as soon as this offset is reached.
   */
  int64 end_offset = 3;
}

message Message {
  bytes content = 1;
  int64 offset = 2;
  int64 length = 3;
}
