// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package klite

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KLiteServiceClient is the client API for KLiteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KLiteServiceClient interface {
	OpenTopic(ctx context.Context, in *OpenTopicRequest, opts ...grpc.CallOption) (*EmptyMessage, error)
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*EmptyMessage, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (KLiteService_SubscribeClient, error)
}

type kLiteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKLiteServiceClient(cc grpc.ClientConnInterface) KLiteServiceClient {
	return &kLiteServiceClient{cc}
}

func (c *kLiteServiceClient) OpenTopic(ctx context.Context, in *OpenTopicRequest, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/protos.KLiteService/OpenTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kLiteServiceClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/protos.KLiteService/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kLiteServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (KLiteService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &KLiteService_ServiceDesc.Streams[0], "/protos.KLiteService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &kLiteServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KLiteService_SubscribeClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type kLiteServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *kLiteServiceSubscribeClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KLiteServiceServer is the server API for KLiteService service.
// All implementations must embed UnimplementedKLiteServiceServer
// for forward compatibility
type KLiteServiceServer interface {
	OpenTopic(context.Context, *OpenTopicRequest) (*EmptyMessage, error)
	Publish(context.Context, *PublishRequest) (*EmptyMessage, error)
	Subscribe(*SubscribeRequest, KLiteService_SubscribeServer) error
	mustEmbedUnimplementedKLiteServiceServer()
}

// UnimplementedKLiteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKLiteServiceServer struct {
}

func (UnimplementedKLiteServiceServer) OpenTopic(context.Context, *OpenTopicRequest) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenTopic not implemented")
}
func (UnimplementedKLiteServiceServer) Publish(context.Context, *PublishRequest) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedKLiteServiceServer) Subscribe(*SubscribeRequest, KLiteService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedKLiteServiceServer) mustEmbedUnimplementedKLiteServiceServer() {}

// UnsafeKLiteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KLiteServiceServer will
// result in compilation errors.
type UnsafeKLiteServiceServer interface {
	mustEmbedUnimplementedKLiteServiceServer()
}

func RegisterKLiteServiceServer(s grpc.ServiceRegistrar, srv KLiteServiceServer) {
	s.RegisterService(&KLiteService_ServiceDesc, srv)
}

func _KLiteService_OpenTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KLiteServiceServer).OpenTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.KLiteService/OpenTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KLiteServiceServer).OpenTopic(ctx, req.(*OpenTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KLiteService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KLiteServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.KLiteService/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KLiteServiceServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KLiteService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KLiteServiceServer).Subscribe(m, &kLiteServiceSubscribeServer{stream})
}

type KLiteService_SubscribeServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type kLiteServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *kLiteServiceSubscribeServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

// KLiteService_ServiceDesc is the grpc.ServiceDesc for KLiteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KLiteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.KLiteService",
	HandlerType: (*KLiteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpenTopic",
			Handler:    _KLiteService_OpenTopic_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _KLiteService_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _KLiteService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/klite.proto",
}
